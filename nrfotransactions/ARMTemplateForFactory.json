{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "nrfotransactions"
		},
		"ADLStorage_LinkService_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ADLStorage_LinkService'"
		},
		"AzureSqlDatabase2_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'AzureSqlDatabase2'"
		},
		"AzureSqlDatabase2_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "nrfo.database.windows.net"
		},
		"AzureSqlDatabase2_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "NRFO"
		},
		"AzureSqlDatabase2_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "obaidul1"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/IncomeExpenceRawPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "IncomeExpenceCopy",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "drop table if exists stg.income_expense_raw;",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "TransDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "TransDate",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Description_text",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Description_text",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "PropertyIndex",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PropertyIndex",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UnitIndex",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "UnitIndex",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Property",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Property",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Category",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Category",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "DebitAmount",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DebitAmount",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CreditAmount",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CreditAmount",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CheckNo",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CheckNo",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Account",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Account",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "IndexT",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "IndexT",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TKey",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "TKey",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "IncomeExpenseRawExcel",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "IncomeExpenceStg",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/IncomeExpenseRawExcel')]",
				"[concat(variables('factoryId'), '/datasets/IncomeExpenceStg')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IncomeExpenseRawDataPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "LoadIncomeExpenseRawData",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"GetIncomeExpenseSourceDate": {},
									"LoadIncomeExpenseRawData": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/LoadIncomeExpenseRawData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PropertyInspectionPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PropertyInspectionETL",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "PropertyInspectionPipeline",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"GetPropertyInspectionRawData": {},
									"SavePropertyInspectionStage": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/PropertyInspectionPipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PropertyOccupanyRaw')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyProperyOccupanyRawData",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "drop table if exists stg.property_occupany_raw;",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OccupanyExcelData",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "OccupanyStgTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OccupanyExcelData')]",
				"[concat(variables('factoryId'), '/datasets/OccupanyStgTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UnitDetailsRawPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyUnitRawData",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "drop table if exists stg.",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Excel1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "UitDetailsStage",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Excel1')]",
				"[concat(variables('factoryId'), '/datasets/UitDetailsStage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Excel1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLStorage_LinkService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Unit Details",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "unit-details.xlsx",
						"container": "unit"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLStorage_LinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IncomeExpenceStg')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "stg",
					"table": "income_expense_raw"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IncomeExpenseRawExcel')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLStorage_LinkService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "income_expense",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "income-expense.xlsx",
						"container": "income-expense-data"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "TransDate",
						"type": "String"
					},
					{
						"name": "Description_text",
						"type": "String"
					},
					{
						"name": "PropertyIndex",
						"type": "String"
					},
					{
						"name": "UnitIndex",
						"type": "String"
					},
					{
						"name": "Property",
						"type": "String"
					},
					{
						"name": "Category",
						"type": "String"
					},
					{
						"name": "DebitAmount",
						"type": "String"
					},
					{
						"name": "CreditAmount",
						"type": "String"
					},
					{
						"name": "CheckNo",
						"type": "String"
					},
					{
						"name": "Account",
						"type": "String"
					},
					{
						"name": "IndexT",
						"type": "String"
					},
					{
						"name": "TKey",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLStorage_LinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OccupanyExcelData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLStorage_LinkService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Occupany",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "property-occupany.xlsx",
						"container": "propery-ocupancy-data"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLStorage_LinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OccupanyStgTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "stg",
					"table": "property_occupany_raw"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PropertyInspectionRawData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLStorage_LinkService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "property-inspection",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "property-inspection.xlsx",
						"container": "propery-inspection-data"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "InspectionDueDate",
						"type": "String"
					},
					{
						"name": "UnitIndex",
						"type": "String"
					},
					{
						"name": "PropertyIndex",
						"type": "String"
					},
					{
						"name": "InspectionType",
						"type": "String"
					},
					{
						"name": "InspectionStatus",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLStorage_LinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UitDetailsStage')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "stg",
					"table": "unit_details"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLStorage_LinkService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ADLStorage_LinkService_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('AzureSqlDatabase2_properties_typeProperties_server')]",
					"database": "[parameters('AzureSqlDatabase2_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('AzureSqlDatabase2_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('AzureSqlDatabase2_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadIncomeExpenseRawData')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "IncomeExpenseRawExcel",
								"type": "DatasetReference"
							},
							"name": "GetIncomeExpenseSourceDate"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "IncomeExpenceStg",
								"type": "DatasetReference"
							},
							"name": "LoadIncomeExpenseRawData",
							"rejectedDataLinkedService": {
								"referenceName": "ADLStorage_LinkService",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "TransformDataType"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TransDate as string,",
						"          Description_text as string,",
						"          PropertyIndex as string,",
						"          UnitIndex as string,",
						"          Property as string,",
						"          Category as string,",
						"          DebitAmount as string,",
						"          CreditAmount as string,",
						"          CheckNo as string,",
						"          Account as string,",
						"          IndexT as string,",
						"          TKey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> GetIncomeExpenseSourceDate",
						"GetIncomeExpenseSourceDate cast(output(",
						"          DebitAmount as double,",
						"          CreditAmount as double",
						"     ),",
						"     errors: true) ~> TransformDataType",
						"TransformDataType select(mapColumn(",
						"          TransDate,",
						"          Description_text,",
						"          PropertyIndex,",
						"          UnitIndex,",
						"          Property,",
						"          Category,",
						"          DebitAmount,",
						"          CreditAmount,",
						"          CheckNo,",
						"          Account,",
						"          IndexT,",
						"          TKey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: false,",
						"     outputAssertFailedRows: true,",
						"     assertFailure_container: 'invalid-data') ~> LoadIncomeExpenseRawData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/IncomeExpenseRawExcel')]",
				"[concat(variables('factoryId'), '/datasets/IncomeExpenceStg')]",
				"[concat(variables('factoryId'), '/linkedServices/ADLStorage_LinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PropertyInspectionPipeline')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "PropertyInspectionRawData",
								"type": "DatasetReference"
							},
							"name": "GetPropertyInspectionRawData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "PropertyInspectionStage",
								"type": "DatasetReference"
							},
							"name": "SavePropertyInspectionStage"
						}
					],
					"transformations": [
						{
							"name": "RemoveEmtyRecords"
						}
					],
					"scriptLines": [
						"source(output(",
						"          InspectionDueDate as string,",
						"          UnitIndex as string,",
						"          PropertyIndex as string,",
						"          InspectionType as string,",
						"          InspectionStatus as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> GetPropertyInspectionRawData",
						"GetPropertyInspectionRawData filter((isNull(InspectionDueDate) && isNull(UnitIndex) && isNull(PropertyIndex) && isNull(InspectionType) && isNull(InspectionStatus))==false()) ~> RemoveEmtyRecords",
						"RemoveEmtyRecords sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> SavePropertyInspectionStage"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/PropertyInspectionRawData')]",
				"[concat(variables('factoryId'), '/datasets/PropertyInspectionStage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PropertyInspectionStage')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "stg",
					"table": "property_inspection_raw"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase2')]"
			]
		}
	]
}