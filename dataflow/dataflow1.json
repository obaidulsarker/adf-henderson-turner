{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "PropertyRawExcelData",
						"type": "DatasetReference"
					},
					"name": "PropertyRawData"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "PropertyStageTable",
						"type": "DatasetReference"
					},
					"name": "LoadPropertyStage"
				},
				{
					"name": "LoadInvalidPropertyIntoExcel"
				}
			],
			"transformations": [
				{
					"name": "DataValidationSplit"
				},
				{
					"name": "checkDateValidation"
				},
				{
					"name": "union1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          SnapshotDate as string,",
				"          PropertyIndex as string,",
				"          PropertyName as string,",
				"          PropertyAddress as string,",
				"          PropertyType as string,",
				"          AcquisitionDate as string,",
				"          OriginalPurchasePrice as string,",
				"          {Current MarketValue} as string,",
				"          CapitalExpenditures as string,",
				"          InsuranceCosts as string,",
				"          Occupancy as string,",
				"          Taxes as string,",
				"          DebtMortgageBalance as string,",
				"          YearBuilt as string,",
				"          SquareFootage as string,",
				"          Neighborhood as string,",
				"          TaxAssessmentValue as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> PropertyRawData",
				"PropertyRawData split((isNull(PropertyIndex) && isNull(PropertyName) && isNull(PropertyType) && isNull(SnapshotDate) && isNull(AcquisitionDate))==false(),",
				"     (isNull(PropertyIndex) && isNull(PropertyName) && isNull(PropertyType) && isNull(SnapshotDate) && isNull(AcquisitionDate))==true(),",
				"     disjoint: true) ~> DataValidationSplit@(valid, invalid)",
				"DataValidationSplit@valid split((isDate(SnapshotDate, 'DD-MM-YYYY') && isDate(AcquisitionDate, 'DD-MM-YYYY'))==false(),",
				"     (isDate(SnapshotDate, 'DD-MM-YYYY') && isDate(AcquisitionDate, 'DD-MM-YYYY'))==true(),",
				"     disjoint: false) ~> checkDateValidation@(ValidSnapshootAndAcquisitionDate, InvalidSnapshootAndAcquisiionDate)",
				"DataValidationSplit@invalid, checkDateValidation@InvalidSnapshootAndAcquisiionDate union(byName: true)~> union1",
				"checkDateValidation@ValidSnapshootAndAcquisitionDate sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {Snapshot Date} as string,",
				"          {Property Index Value} as string,",
				"          {Property Name} as string,",
				"          {Property Address} as string,",
				"          {Property Type} as string,",
				"          {Acquisition Date} as string,",
				"          {Original Purchase Price} as string,",
				"          {Current Market Value} as string,",
				"          {Capital Expenditures} as string,",
				"          InsuranceCosts as string,",
				"          Occupancy as string,",
				"          Taxes as string,",
				"          {Debt/Mortgage Balance} as string,",
				"          {Year Built} as string,",
				"          {Square Footage} as string,",
				"          {Neighborhood/Micro-Market} as string,",
				"          {Tax Assessment Value} as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> LoadPropertyStage",
				"union1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> LoadInvalidPropertyIntoExcel"
			]
		}
	}
}