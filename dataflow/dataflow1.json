{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "UnitRawDataExcel",
						"type": "DatasetReference"
					},
					"name": "GetUnitRawData"
				},
				{
					"dataset": {
						"referenceName": "dim_property",
						"type": "DatasetReference"
					},
					"name": "GetPropertyDetails"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "InvalidUnitDetailsData",
						"type": "DatasetReference"
					},
					"name": "LoadInvalidUnitIndex"
				}
			],
			"transformations": [
				{
					"name": "split1"
				},
				{
					"name": "FindPropertyIndex"
				},
				{
					"name": "CheckValidProperty"
				},
				{
					"name": "ErrorReason"
				},
				{
					"name": "ErrorReason2"
				},
				{
					"name": "union1"
				},
				{
					"name": "select2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          UnitIndex as string,",
				"          PropertyIndex as string,",
				"          UnitName as string,",
				"          UnitType as string,",
				"          Bedrooms as string,",
				"          Bathrooms as string,",
				"          SpaceSquareFootage as string,",
				"          SecurityDeposit as string,",
				"          MonthlyRent as string,",
				"          Status as string,",
				"          LeaseStartDate as string,",
				"          LeaseEndDate as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> GetUnitRawData",
				"source(output(",
				"          property_id as integer,",
				"          property_name as string,",
				"          property_index as string,",
				"          property_type_id as integer,",
				"          property_address as string,",
				"          aquisition_date as date,",
				"          original_purchase_date as date,",
				"          current_merket_value as decimal(10,2),",
				"          capital_expendition as decimal(10,2),",
				"          insurance_cost as decimal(10,2),",
				"          tax_amount as decimal(10,2),",
				"          built_year as integer,",
				"          square_footage as integer,",
				"          mortage_balance as decimal(10,2),",
				"          last_updated_at as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> GetPropertyDetails",
				"GetUnitRawData split((isNull(UnitIndex) && isNull(UnitName) && isNull(PropertyIndex) && isNull(UnitType) && isNull(Status) && isDate(LeaseStartDate,'DD-MMM-YYYY') && isDate(LeaseEndDate,'DD-MMM-YYYY'))==false(),",
				"     disjoint: false) ~> split1@(IsValid, isInvalid)",
				"split1@IsValid, GetPropertyDetails lookup(PropertyIndex == property_index,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> FindPropertyIndex",
				"select2 split(isNull(property_id)==false(),",
				"     disjoint: false) ~> CheckValidProperty@(hasProperty, notValidProperty)",
				"CheckValidProperty@notValidProperty derive(error_reason = 'Invalid Property Index') ~> ErrorReason",
				"split1@isInvalid derive(error_reason = 'Mandatory columns are empty') ~> ErrorReason2",
				"ErrorReason2, ErrorReason union(byName: true)~> union1",
				"FindPropertyIndex select(mapColumn(",
				"          UnitIndex,",
				"          PropertyIndex,",
				"          UnitName,",
				"          UnitType,",
				"          Bedrooms,",
				"          Bathrooms,",
				"          SpaceSquareFootage,",
				"          SecurityDeposit,",
				"          MonthlyRent,",
				"          Status,",
				"          LeaseStartDate,",
				"          LeaseEndDate",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"union1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> LoadInvalidUnitIndex"
			]
		}
	}
}